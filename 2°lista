{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 2º Lista de Exercícios de Simulação 2018.2  \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h3> <span style=\"color:blue\">  Resposta: $\\frac{(b-a)}{N}\\sum_{k=1}^{N} f(x)$ $\\approx$ $\\int_{a}^{b} f(x)dx$\n",
    "\n",
    "</span> </h3> "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---\n",
    "## 1. Resolva as seguintes integrais através do método de Monte Carlo"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### a) $\\int_{0}^{1} e^{e^{x}} dx$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5,0,'Distribution')"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f86dffef320>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "%matplotlib inline \n",
    "from scipy import random\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "a = 0\n",
    "b = 1 #limites \n",
    "N = 10000\n",
    "\n",
    "\n",
    "def function(x):\n",
    "    return np.exp(np.exp(x))\n",
    "\n",
    "listresp=[]\n",
    "\n",
    "for i in range(N):\n",
    "    xrand = random.uniform(a,b,N)\n",
    "    integral = 0\n",
    "\n",
    "    for i in range(N):\n",
    "        integral += function(xrand[i])\n",
    "    \n",
    "    resp = (b-a)/float(N)*integral\n",
    "    listresp.append(resp)\n",
    "    \n",
    "    \n",
    "plt.title(\"Integral de Monte Carlo\")\n",
    "plt.hist(listresp, bins = 30, ec = \"black\")\n",
    "plt.xlabel(\"Distribution\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "6.316563839027609\n"
     ]
    }
   ],
   "source": [
    "\"\"\"\n",
    "\n",
    "#Código da Integral resolvida de forma exata\n",
    "\n",
    "\"\"\"\n",
    "\n",
    "\n",
    "from scipy.integrate import quad\n",
    "def integrand(x, a, b):\n",
    "    return np.exp(np.exp(x))\n",
    "\n",
    "a = 0\n",
    "b = 1\n",
    "I = quad(integrand, 0, 1, args=(a,b))\n",
    "print(I[0]-I[1])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### b) $\\int_{-\\infty}^{+\\infty} x(1\\, +\\, x^{2})^{-2}\\:  dx$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5,0,'Areas')"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f86d6d19f28>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "%matplotlib inline \n",
    "from scipy import random\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "\n",
    "a = 0\n",
    "b =1  #limites \n",
    "N = 10000\n",
    "\n",
    "\n",
    "def function(x):\n",
    "    return x/(1+x**2)**2\n",
    "\n",
    "listresp=[]\n",
    "\n",
    "for i in range(N):\n",
    "    xrand = random.uniform(a,b,N)\n",
    "    integral = 0\n",
    "\n",
    "    for i in range(N):\n",
    "        integral += function(xrand[i])\n",
    "    \n",
    "    resp = (b-a)/float(N)*integral\n",
    "    listresp.append(resp)\n",
    "    \n",
    "    \n",
    "plt.title(\"Integral de Monte Carlo\")\n",
    "plt.hist(listresp, bins = 30, ec = \"black\")\n",
    "plt.xlabel(\"Areas\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.24999999999999722\n"
     ]
    }
   ],
   "source": [
    "\"\"\"\n",
    "\n",
    "#Código da Integral resolvida de forma exata\n",
    "\n",
    "\"\"\"\n",
    "\n",
    "from scipy.integrate import quad\n",
    "def integrand(x, a, b):\n",
    "    return x/(1+x**2)**2\n",
    "\n",
    "a = 0\n",
    "b = 1\n",
    "I = quad(integrand, 0, 1, args=(a,b))\n",
    "print(I[0]-I[1])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### c) $\\int_{0}^{1} \\int_{0}^{1} e^{(x \\, + \\, y)^{2}} \\:dy \\:  dx$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5,0,'Areas')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f86d720a2b0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "%matplotlib inline \n",
    "from scipy import random\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "\n",
    "a = 0\n",
    "b =1  #limites \n",
    "N = 10000\n",
    "\n",
    "\n",
    "def function(x,y):\n",
    "    return np.exp(x+y)**2\n",
    "\n",
    "listresp=[]\n",
    "\n",
    "for i in range(N):\n",
    "    xrand = random.uniform(a,b,N)\n",
    "    yrand = random.uniform(a,b,N)\n",
    "    integral = 0\n",
    "\n",
    "    for i in range(N):\n",
    "        integral += function(xrand[i],yrand[i])\n",
    "    \n",
    "    resp = (b-a)/float(N)*integral\n",
    "    listresp.append(resp)\n",
    "    \n",
    "    \n",
    "plt.title(\"Integral de Monte Carlo\")\n",
    "plt.hist(listresp, bins = 30, ec = \"black\")\n",
    "plt.xlabel(\"Areas\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10.205009458820474\n"
     ]
    }
   ],
   "source": [
    "\"\"\"\n",
    "\n",
    "#Código da Integral resolvida de forma exata\n",
    "\n",
    "\"\"\"\n",
    "\n",
    "from scipy.integrate import dblquad\n",
    "area = dblquad(lambda x, y: np.exp(x+y)**2, 0, 1, lambda x: 0, lambda x: 1)\n",
    "print(area[0]-area[1])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---\n",
    "## 2. A distribuição de Cauchy com parâmetro α tem a seguinte função de densidade: \n",
    "<p> \n",
    "<p>\n",
    "\n",
    "<h2 align=\"center\">  $f(x) = \\frac{\\alpha }{\\pi (\\alpha^{2} \\, + \\, x^{2})}; \\; -\\infty \\, < \\, x < \\, \\infty \\,$ </h2> "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### a) Utilize o método da inversa para gerar valores desta distribuição."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h3> <span style=\"color:blue\">  Resposta: Dado que sabemos simular variaveis aleatórias unifomes $U \\sim U(0, 1)$ , foi visto que para simular uma V.A. X com $F_{X}$ temos $Y = F^{-1}_{X}(U)$ onde Y tem a mesma distribuição que X.  \n",
    " A $F_{X}$  da Cauchy com parametro α é: $ F_{X}(x|\\alpha ) = \\frac{tan^{-1}(\\frac{x}{\\alpha})}{\\pi }$.  \n",
    "A inversa da função acumulada é: $F_{X}^{-1} = x\\, tan(\\pi b)$  </span> </h3> "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5044545539531126.0\n",
      "3.141592653589793\n"
     ]
    }
   ],
   "source": [
    "from math import tan, pi\n",
    "from random import random\n",
    "\n",
    "def metodo_inversa(a):\n",
    "    return random() * tan(pi*a)\n",
    "\n",
    "print(metodo_inversa(1.5))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### b) Utilize o método da rejeição para gerar valores para a curva normal a partir de valores da distribuição Cauchy."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.006366197723675814\n"
     ]
    }
   ],
   "source": [
    "from scipy.stats import norm, cauchy\n",
    "from math import tan, pi\n",
    "from random import random\n",
    "\n",
    "def metodo_rejeicao(mi, sigma):\n",
    "    while True:\n",
    "        W = cauchy.pdf(mi)\n",
    "        U = random()\n",
    "        if U <= norm.pdf(W, loc=mi, scale=sigma)/ cauchy.pdf(W, loc=mi):\n",
    "            return W\n",
    "\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "print(metodo_rejeicao(7, 2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
